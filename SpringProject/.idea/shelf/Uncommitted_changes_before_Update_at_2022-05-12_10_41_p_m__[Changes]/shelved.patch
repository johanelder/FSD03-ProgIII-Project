Index: src/main/java/com/example/SpringProject/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.SpringProject.entity;\r\n\r\npublic class User {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/SpringProject/entity/User.java b/src/main/java/com/example/SpringProject/entity/User.java
--- a/src/main/java/com/example/SpringProject/entity/User.java	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ b/src/main/java/com/example/SpringProject/entity/User.java	(date 1652407214829)
@@ -1,4 +1,39 @@
 package com.example.SpringProject.entity;
 
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import javax.validation.constraints.NotEmpty;
+import javax.validation.constraints.Email;
+import javax.validation.constraints.Size;
+
+@Entity
+@Table(name = "users")
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
 public class User {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @Column(nullable = false, unique = true, length = 45)
+    @Email(message = "{validation.email.Type}")
+    private String email;
+
+    @Column(nullable = false, length = 64)
+    @NotEmpty(message = "Name can not be empty!!")
+    private String password;
+
+
+    @Column(name = "username", nullable = false, length = 20)
+    @NotEmpty(message = "Name can not be empty!!")
+    @Size(min = 4, max = 20, message = "Name must be between 4 and 20 characters long!")
+    private String username;
+
+    @Transient
+    @NotEmpty(message = "retypePassword can not be empty!!")
+    private String retypePassword;
 }
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ b/src/main/resources/application.properties	(date 1652407214522)
@@ -1,1 +1,6 @@
+spring.datasource.url=jdbc:mysql://localhost:3306/jmb
+spring.datasource.username=root
+spring.datasource.password=root
+
+spring.jpa.hibernate.ddl-auto=update
 
Index: src/main/resources/templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Title</title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/index.html b/src/main/resources/templates/index.html
--- a/src/main/resources/templates/index.html	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ b/src/main/resources/templates/index.html	(date 1652408981635)
@@ -1,10 +1,31 @@
 <!DOCTYPE html>
-<html lang="en">
+<html xmlns:th="http://www.thymeleaf.org">
 <head>
-    <meta charset="UTF-8">
-    <title>Title</title>
+    <meta charset="ISO-8859-1">
+    <title>Home</title>
+    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
+          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
 </head>
 <body>
+<nav class="navbar navbar-expand-sm bg-light">
+    <ul class="navbar-nav">
+        <li class="nav-item">
+            <a th:href="@{/admin/users}" class="nav-link">List of Users</a>
+        </li>
+        <li class="nav-item">
+            <a th:href="@{/login}" class="nav-link">Login</a>
+
+        </li>
+        <li class="nav-item">
+            <a th:href="@{/register}" class="nav-link">Register</a>
 
+        </li>
+    </ul>
+</nav>
+<div class="container">
+    <h2>Home page</h2>
+    <hr/>
+
+</div>
 </body>
 </html>
\ No newline at end of file
Index: src/main/java/com/example/SpringProject/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.SpringProject.controller;\r\n\r\npublic class UserController {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/SpringProject/controller/UserController.java b/src/main/java/com/example/SpringProject/controller/UserController.java
--- a/src/main/java/com/example/SpringProject/controller/UserController.java	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ b/src/main/java/com/example/SpringProject/controller/UserController.java	(date 1652408679973)
@@ -1,4 +1,61 @@
 package com.example.SpringProject.controller;
 
+import com.example.SpringProject.entity.User;
+import com.example.SpringProject.repository.UserRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.validation.Errors;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+
+import javax.validation.Valid;
+import java.util.List;
+
+@Controller
 public class UserController {
+    @Autowired
+    private UserRepository userRepo;
+
+    @GetMapping("")
+    public String homePage() {
+
+        return "index";
+    }
+    @GetMapping("/register")
+    public String showRegistrationForm(Model model) {
+        model.addAttribute("user", new User());
+
+        return "signupForm";
+    }
+
+    @PostMapping("/processRegister")
+    public String processRegister(@Valid User user, Errors errors) {
+        // validation
+        if (null != errors && errors.getErrorCount() > 0 ) {
+            return "signupForm";
+        } else if(!user.getRetypePassword().equals(user.getPassword())) {
+
+            errors.rejectValue("retypePassword", "Password and Confirm not the same", null, "Password and Confirm not the same!");
+            return "signupForm";
+        } else{
+            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
+            String encodedPassword = passwordEncoder.encode(user.getPassword());
+            user.setPassword(encodedPassword);
+            userRepo.save(user);
+
+            return "registerSuccess";
+        }
+    }
+
+
+
+    @GetMapping("admin/users")
+    public String listUsers(Model model) {
+        List<User> listUsers = userRepo.findAll();
+        model.addAttribute("listUsers", listUsers);
+
+        return "admin/users";
+    }
 }
Index: src/main/java/com/example/SpringProject/repository/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.SpringProject.repository;\r\n\r\npublic class UserRepository {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/SpringProject/repository/UserRepository.java b/src/main/java/com/example/SpringProject/repository/UserRepository.java
--- a/src/main/java/com/example/SpringProject/repository/UserRepository.java	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ b/src/main/java/com/example/SpringProject/repository/UserRepository.java	(date 1652407214742)
@@ -1,4 +1,10 @@
 package com.example.SpringProject.repository;
 
-public class UserRepository {
+import com.example.SpringProject.entity.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+
+public interface UserRepository  extends JpaRepository<User, Long> {
+    @Query("SELECT u FROM User u WHERE u.email = ?1")
+    public User findByEmail(String email);
 }
Index: src/main/resources/templates/admin.html
===================================================================
diff --git a/src/main/resources/templates/admin.html b/src/main/resources/templates/admin.html
deleted file mode 100644
--- a/src/main/resources/templates/admin.html	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ /dev/null	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
@@ -1,10 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>Title</title>
-</head>
-<body>
-
-</body>
-</html>
\ No newline at end of file
Index: src/main/resources/templates/login.html
===================================================================
diff --git a/src/main/resources/templates/login.html b/src/main/resources/templates/login.html
deleted file mode 100644
--- a/src/main/resources/templates/login.html	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ /dev/null	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
@@ -1,10 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>Title</title>
-</head>
-<body>
-
-</body>
-</html>
\ No newline at end of file
Index: src/main/java/com/example/SpringProject/security/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/SpringProject/security/WebSecurityConfig.java b/src/main/java/com/example/SpringProject/security/WebSecurityConfig.java
new file mode 100644
--- /dev/null	(date 1652408773973)
+++ b/src/main/java/com/example/SpringProject/security/WebSecurityConfig.java	(date 1652408773973)
@@ -0,0 +1,62 @@
+package com.example.SpringProject.security;
+
+
+import com.example.SpringProject.service.CustomUserDetailsService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+
+import javax.sql.DataSource;
+
+@Configuration
+@EnableWebSecurity
+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
+
+    @Autowired
+    private DataSource dataSource;
+
+    @Bean
+    public UserDetailsService userDetailsService() {
+        return new CustomUserDetailsService();
+    }
+
+    @Bean
+    public BCryptPasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+
+    @Bean
+    public DaoAuthenticationProvider authenticationProvider() {
+        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
+        authProvider.setUserDetailsService(userDetailsService());
+        authProvider.setPasswordEncoder(passwordEncoder());
+
+        return authProvider;
+    }
+
+    @Override
+    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
+        auth.authenticationProvider(authenticationProvider());
+    }
+
+    @Override
+    protected void configure(HttpSecurity http) throws Exception {
+        http.authorizeRequests()
+                .antMatchers("/admin/users").authenticated()
+                .anyRequest().permitAll()
+                .and()
+                .formLogin()
+                .usernameParameter("email")
+                .defaultSuccessUrl("/index")
+                .permitAll()
+                .and()
+                .logout().logoutSuccessUrl("/").permitAll();
+    }
+}
Index: src/main/java/com/example/SpringProject/service/CustomUserDetailsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/SpringProject/service/CustomUserDetailsService.java b/src/main/java/com/example/SpringProject/service/CustomUserDetailsService.java
new file mode 100644
--- /dev/null	(date 1652407903961)
+++ b/src/main/java/com/example/SpringProject/service/CustomUserDetailsService.java	(date 1652407903961)
@@ -0,0 +1,26 @@
+package com.example.SpringProject.service;
+
+
+import com.example.SpringProject.entity.User;
+import com.example.SpringProject.repository.UserRepository;
+import com.example.SpringProject.security.CustomUserDetails;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+
+public class CustomUserDetailsService implements UserDetailsService {
+    @Autowired
+    private UserRepository userRepo;
+
+    @Override
+    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
+        User user = userRepo.findByEmail(username);
+        if (user == null) {
+            throw new UsernameNotFoundException("User not found");
+        }
+        return new CustomUserDetails(user);
+    }
+
+}
+
Index: src/main/resources/templates/registerSuccess.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/registerSuccess.html b/src/main/resources/templates/registerSuccess.html
new file mode 100644
--- /dev/null	(date 1652407214629)
+++ b/src/main/resources/templates/registerSuccess.html	(date 1652407214629)
@@ -0,0 +1,16 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+  <meta charset="ISO-8859-1">
+  <title>Success</title>
+  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
+        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
+</head>
+<body>
+<div class="container text-center">
+  <h3>You have signed up successfully!</h3>
+  <h4><a th:href="@{/login}">Click here to Login</a></h4>
+</div>
+
+</body>
+</html>
\ No newline at end of file
Index: src/main/resources/templates/signupForm.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/signupForm.html b/src/main/resources/templates/signupForm.html
new file mode 100644
--- /dev/null	(date 1652407214990)
+++ b/src/main/resources/templates/signupForm.html	(date 1652407214990)
@@ -0,0 +1,64 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+    <meta charset="ISO-8859-1">
+
+    <title>Sign Up</title>
+    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
+          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
+
+</head>
+<body>
+    <div class="container text-center">
+        <div>
+            <h1>Registration - Sign Up</h1>
+        </div>
+        <form th:action="@{/processRegister}" th:object="${user}"
+            method="post" style="max-width: 600px; margin: 0 auto;">
+        <div class="m-3">
+
+            <div class="form-group row">
+                <label class="col-4 col-form-label">Username: </label>
+                <div class="col-8">
+                    <input type="text" th:field="*{username}" class="form-control"
+                           required minlength="2" maxlength="20"/>
+                    <p class="alert alert-danger" th:if="${#fields.hasErrors('username')}" th:errors="*{username}">
+                </div>
+            </div>
+
+            <div class="form-group row">
+                <label class="col-4 col-form-label">E-mail: </label>
+                <div class="col-8">
+                    <input type="email" th:field="*{email}" class="form-control" required />
+                    <p class="alert alert-danger" th:if="${#fields.hasErrors('email')}" th:errors="*{email}">
+                </div>
+            </div>
+
+            <div class="form-group row">
+                <label class="col-4 col-form-label">Password: </label>
+                <div class="col-8">
+                    <input type="password" th:field="*{password}" class="form-control"
+                            required minlength="6" maxlength="10"/>
+                    <p class="alert alert-danger" th:if="${#fields.hasErrors('password')}" th:errors="*{password}">
+                </div>
+            </div>
+
+            <div class="form-group row">
+                <label class="col-4 col-form-label">Confirm: </label>
+                <div class="col-8">
+                    <input type="password" th:field="*{retypePassword}" class="form-control"
+                           required minlength="6" maxlength="10"/>
+                    <p class="alert alert-danger" th:if="${#fields.hasErrors('retypePassword')}" th:errors="*{retypePassword}">
+                </div>
+            </div>
+
+
+
+            <div>
+                <button type="submit" class="btn btn-primary">Sign Up</button>
+            </div>
+        </div>
+        </form>
+    </div>
+</body>
+</html>
\ No newline at end of file
Index: src/main/resources/templates/admin/users.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/templates/admin/users.html b/src/main/resources/templates/admin/users.html
new file mode 100644
--- /dev/null	(date 1652407215635)
+++ b/src/main/resources/templates/admin/users.html	(date 1652407215635)
@@ -0,0 +1,45 @@
+<!DOCTYPE html>
+<html xmlns:th="http://www.thymeleaf.org">
+<head>
+    <meta charset="ISO-8859-1">
+    <title>List of Users</title>
+    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
+          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
+</head>
+<body>
+<div class="container text-center">
+    <div>
+        <form th:action="@{/logout}" method="post">
+            <p>
+                Welcome <b>[[${#request.userPrincipal.principal.name}]]</b>
+            </p>
+            <input type="submit" value="Sign Out" />
+        </form>
+    </div>
+    <div>
+        <h1>List of Users</h1>
+    </div>
+
+    <div>
+        <table class="table table-striped table-bordered">
+            <thead class="thead-dark">
+            <tr>
+                <th>User ID</th>
+                <th>E-mail</th>
+                <th>Username</th>
+
+            </tr>
+            </thead>
+            <tbody>
+            <tr th:each="user: ${listUsers}">
+                <td th:text="${user.id}">User ID</td>
+                <td th:text="${user.email}">E-mail</td>
+                <td th:text="${user.username}">Username</td>
+
+            </tr>
+            </tbody>
+        </table>
+    </div>
+</div>
+</body>
+</html>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.6.7</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.example</groupId>\r\n\t<artifactId>SpringProject</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>SpringProject</name>\r\n\t<description>Group Project Using Spring Boot</description>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-webflux</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.thymeleaf.extras</groupId>\r\n\t\t\t<artifactId>thymeleaf-extras-springsecurity5</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-devtools</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-java</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.projectreactor</groupId>\r\n\t\t\t<artifactId>reactor-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.security</groupId>\r\n\t\t\t<artifactId>spring-security-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision e659a5ff4cd7c8cd16f62b10b8c9621bab33988d)
+++ b/pom.xml	(date 1652405774140)
@@ -73,6 +73,10 @@
 			<artifactId>spring-security-test</artifactId>
 			<scope>test</scope>
 		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-validation</artifactId>
+		</dependency>
 	</dependencies>
 
 	<build>
Index: src/main/java/com/example/SpringProject/security/CustomUserDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/SpringProject/security/CustomUserDetails.java b/src/main/java/com/example/SpringProject/security/CustomUserDetails.java
new file mode 100644
--- /dev/null	(date 1652407903914)
+++ b/src/main/java/com/example/SpringProject/security/CustomUserDetails.java	(date 1652407903914)
@@ -0,0 +1,57 @@
+package com.example.SpringProject.security;
+
+
+import com.example.SpringProject.entity.User;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import java.util.Collection;
+
+public class CustomUserDetails implements UserDetails {
+    private User user;
+
+    public CustomUserDetails(User user) {
+        this.user = user;
+    }
+
+    @Override
+    public Collection<? extends GrantedAuthority> getAuthorities() {
+        return null;
+    }
+
+    @Override
+    public String getPassword() {
+        return user.getPassword();
+    }
+
+    @Override
+    public String getUsername() {
+        return user.getEmail();
+    }
+
+    @Override
+    public boolean isAccountNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+    public String getName() {
+        return user.getUsername();
+    }
+
+}
+
